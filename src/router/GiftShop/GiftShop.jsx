import React, { useState, useEffect } from "react";
import styles from "./GiftShop.module.css";
import axios from "axios";
import { useAuth } from "../../../src/globalContext/AuthContext";

function GiftShop() {
  const { customerID } = useAuth();
  const [chooseType, setChooseType] = useState("T·∫•t c·∫£");
  const [allVouchers, setAllVouchers] = useState([]);
  const [chooseVouchers, setChooseVouchers] = useState([]);
  const [savedVouchers, setSavedVouchers] = useState([]);
  const [searchText, setSearchText] = useState("");
  const [customerCoin, setCustomerCoin] = useState(0); // üîπ Th√™m state l∆∞u s·ªë xu

  useEffect(() => {
    fetchVoucher();
    if (customerID) {
      fetchSavedVouchers();
      fetchCustomerCoin(); // üîπ L·∫•y s·ªë xu khi t·∫£i trang
    }
  }, [customerID]);

  // üîπ L·∫•y s·ªë xu c·ªßa kh√°ch h√†ng
  const fetchCustomerCoin = async () => {
    try {
      const response = await axios.get(`http://localhost:3001/customers/${customerID}`);
      setCustomerCoin(response.data.xu);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y s·ªë xu:", error);
    }
  };

  // L·∫•y danh s√°ch t·∫•t c·∫£ voucher
  const fetchVoucher = async () => {
    try {
      const response = await axios.get("http://localhost:3001/api/Voucher/fetchAllVouchers");
      setAllVouchers(response.data);
      setChooseVouchers(response.data);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch voucher:", error);
    }
  };

  // L·∫•y danh s√°ch voucher ƒë√£ l∆∞u c·ªßa kh√°ch h√†ng
  const fetchSavedVouchers = async () => {
    try {
      const response = await axios.get(`http://localhost:3001/api/VoucherDetail/SavedVouchers/${customerID}`);
      setSavedVouchers(response.data.map((v) => v.VoucherID));
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch voucher ƒë√£ l∆∞u:", error);
    }
  };

  const changeType = (type) => {
    setChooseType(type);
    if (type === "S√†n") {
      setChooseVouchers(allVouchers.filter((item) => item.ShopID === null));
    } else if (type === "C·ª≠a h√†ng") {
      setChooseVouchers(allVouchers.filter((item) => item.ShopID !== null));
    } else if (type === "S·∫£n ph·∫©m") {
      setChooseVouchers(allVouchers.filter((item) => item.type === "S·∫£n ph·∫©m"));
    } else if (type === "Giao h√†ng") {
      setChooseVouchers(allVouchers.filter((item) => item.type === "Giao h√†ng"));
    } else {
      setChooseVouchers(allVouchers);
    }
  };

  const searchVoucher = () => {
    const vouchers = allVouchers.filter((v) =>
      v.VoucherName.toLowerCase().includes(searchText.toLowerCase())
    );
    setChooseVouchers(vouchers);
  };

  // üîπ L∆∞u voucher v√† tr·ª´ 30 xu
  const saveVoucher = async (voucherID) => {
    if (!customerID) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u voucher!");
      return;
    }
    if (customerCoin < 30) {
      alert("‚ùå B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ l∆∞u voucher!");
      return;
    }

    try {
      await axios.post("http://localhost:3001/api/VoucherDetail/SaveVoucherID", {
        saveVoucherID: voucherID,
        customerID: customerID,
      });

      await axios.put(`http://localhost:3001/customers/${customerID}`, {
        xu: customerCoin - 30, // üîπ Tr·ª´ 30 xu
      });

      setCustomerCoin((prev) => prev - 30); // üîπ C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
      setSavedVouchers([...savedVouchers, voucherID]);
      alert("‚úÖ L∆∞u voucher th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå L·ªói khi l∆∞u voucher:", error);
      alert("‚ùå L∆∞u voucher th·∫•t b·∫°i!");
    }
  };

  // üîπ H·ªßy l∆∞u voucher
  const unsaveVoucher = async (voucherID) => {
    if (!customerID) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!");
      return;
    }

    try {
      await axios.delete("http://localhost:3001/api/VoucherDetail/DeleteVoucherID", {
        params: { deleteVoucherID: voucherID, customerID },
      });

      setSavedVouchers(savedVouchers.filter((id) => id !== voucherID)); //  C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
      alert("‚úÖ H·ªßy l∆∞u voucher th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå L·ªói khi h·ªßy l∆∞u voucher:", error);
      alert("‚ùå H·ªßy l∆∞u voucher th·∫•t b·∫°i!");
    }
  };

  return (
    <div className={styles.giftShop}>
      <h1>üéÅ Danh s√°ch m√£ gi·∫£m gi√°</h1>

      {/* Hi·ªÉn th·ªã s·ªë xu c·ªßa kh√°ch h√†ng */}
      <div className={styles.customerCoin}>
        <p>üí∞ S·ªë xu c·ªßa b·∫°n: <strong>{customerCoin}</strong></p>
      </div>

      {/* √î t√¨m ki·∫øm */}
      <div className={styles.searchVoucherDiv}>
        <h2>T√¨m ki·∫øm m√£ gi·∫£m gi√°</h2>
        <div>
          <input
            type="text"
            placeholder="Nh·∫≠p t√™n voucher..."
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
          />
          <button onClick={searchVoucher}>üîç T√¨m ki·∫øm</button>
        </div>
      </div>

      {/* B·ªô l·ªçc lo·∫°i voucher */}
      <div className={styles.typeVoucherList}>
        {["T·∫•t c·∫£", "S√†n", "C·ª≠a h√†ng", "S·∫£n ph·∫©m", "Giao h√†ng"].map((type) => (
          <span
            key={type}
            onClick={() => changeType(type)}
            className={chooseType === type ? styles.chooseType : ""}
          >
            {type}
          </span>
        ))}
      </div>

      {/* Danh s√°ch voucher */}
      <div className={styles.ListVoucher}>
        {chooseVouchers.length > 0 ? (
          chooseVouchers.map((item, index) => (
            <div className={styles.voucherDetail} key={index}>
            <img src={item.VoucherImg} alt={item.VoucherName} />
            <div className={styles.voucherInfo}>
                <p>{item.VoucherName}</p>
                <p>H·∫°n d√πng: {new Date(item.EndDate).toLocaleDateString("en-GB")}</p>

                <div className={styles.buttonContainer}>
                {savedVouchers.includes(item.VoucherID) ? (
                    <button className={styles.unsaveButton} onClick={() => unsaveVoucher(item.VoucherID)}>
                     H·ªßy l∆∞u
                    </button>
                ) : (
                    <button className={styles.saveButton} onClick={() => saveVoucher(item.VoucherID)}>
                     L∆∞u Voucher (-30 xu)
                    </button>
                )}
                </div>
            </div>
            </div>
          ))
        ) : (
          <div>‚ùå Kh√¥ng c√≥ m√£ gi·∫£m gi√°</div>
        )}
      </div>
    </div>
  );
}

export default GiftShop;
